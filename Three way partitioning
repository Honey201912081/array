/*
Given an array A[] and a range [a, b]. The task is to partition the array around the range such that array is divided into three parts.
1) All elements smaller than a come first.
2) All elements in range a to b come next.
3) All elements greater than b appear in the end.
The individual elements of three sets can appear in any order. You are required to return the modified arranged array.

Example 1:

Input: N = 5, A[] = {1, 2, 3, 3, 4}
[a, b] = [1, 2]
Output: {1, 2, 3, 3, 4}
Explanation: One possible arrangement is:
{1, 2, 3, 3, 4}. 
*/

vector<int> threeWayPartition(vector<int> A, int a, int b)
{
     int l=A.size();
     int low=0;
     int mid=0;
     int high=l-1;
     while(mid<=high)
     {
         if(A[mid]<a)
         {
             swap(A[low],A[mid]);
             low++;
             mid++;
         }
         else if(A[mid]>b)
         {
             swap(A[mid],A[high]);
             high--;
         }
         else{
             mid++;
         }
     }
     return A;
}
