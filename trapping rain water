/*
Given an array arr[] of N non-negative integers representing height of blocks at index i as Ai where the width of each block is 1. Compute how much water can be trapped in between blocks after raining.
Example:
Input:
2
4
7 4 0 9
3
6 9 9

Output:
10
0
*/
/*
logic: 

1)find left max and right max of all element.
2)arr[i]= min(left[i],right[i])-current[i]
3)sum all values in ans.

*/
#include <iostream>

using namespace std;

int main() {
	//code
	int t;
	cin>>t;
	while(t--)
	{
	    long int n;
	    cin>>n;
	    long int *arr= new long int[n];
	    long int *left= new long int[n];
	    long int *right= new long int[n];
	    for(long int i=0;i<n;i++)
	    {
	        cin>>arr[i];
	    }
	    long int lmax=-1;
	    long int rmax=-1;
	    for(long int i=0;i<n;i++)
	    {
	        if(lmax<arr[i])
	        {
	            lmax=arr[i];
	        }
	        left[i]=lmax;
	    }
	    for(long int i=n-1;i>=0;i--)
	    {
	        if(rmax<arr[i])
	        {
	            rmax=arr[i];
	        }
	        right[i]=rmax;
	    }
	    long int *ans= new long int[n];
	    long int sum=0;
	    for(int i=0;i<n;i++)
	    {
	        ans[i]=min(left[i],right[i])-arr[i];
	        sum+=ans[i];
	    }
	    cout<<sum<<endl;
	   
	}
	return 0;
}
