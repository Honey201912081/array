/*
Find out the maximum sub-array of non negative numbers from an array.

The sub-array should be contiguous i.e., a sub-array created by choosing the second and fourth element and skipping the third element is invalid.

Maximum sub-array is defined in terms of the sum of the elements in the sub-array. Sub-array A is greater than sub-array B if sum(A) > sum(B).

Example:
A : [1, 2, 5, -7, 2, 3]
The two sub-arrays are [1, 2, 5] [2, 3].
The answer is [1, 2, 5] as its sum is larger than [2, 3]

input:
6
1 2 5 -7 2 3
output:
1 2 5

*/

class Solution{
public:
	vector<int> findSubarray(int a[], int n) {
	    long long max_sum = -1;
	    long long cur_sum = 0;
	    int max_range_left = -1;
	    int max_range_right = -1;
	    int cur_range_left = 0;
	    int cur_range_right = 0;
	    while (cur_range_right < n) {
	        if (a[cur_range_right] < 0) {
	            cur_range_left = cur_range_right + 1;
	            cur_sum = 0;
	        } else {
	            cur_sum += (long long)a[cur_range_right];
	            if (cur_sum > max_sum) {
	                max_sum = cur_sum;
	                max_range_left = cur_range_left;
	                max_range_right = cur_range_right;
	            } else if (cur_sum == max_sum) {
	                if (cur_range_right + 1 - cur_range_left >
	                    max_range_right + 1 - max_range_left) {
	                    max_range_left = cur_range_left;
	                    max_range_right = cur_range_right;
	                }
	            }
	        }
	        cur_range_right++;
	    }
	    vector<int> ans;
	    if (max_range_left == -1 || max_range_right == -1) {
	        ans.push_back(-1);
	        return ans;
	    }

	    for (int i = max_range_left; i <= max_range_right; ++i) ans.push_back(a[i]);
	    return ans;
	}
};
